require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe IndividualReviewsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # IndividualReview. As you add validations to IndividualReview, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IndividualReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all individual_reviews as @individual_reviews" do
      individual_review = IndividualReview.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:individual_reviews)).to eq([individual_review])
    end
    it "assigns ids of all employees reviewed by current user to user_array" do
      user1 = create(:user)
      user2 = create(:user)
      current_user = user1
      ir = create(:individual_review, reviewer_id: user1.id, employee_id: user2.id)
      user_array = current_user.authored_reviews.map(&:employee_id)
      expect(user_array).to match_array([user2.id])
    end
    it "assigns @users to all users including profiles where ids are found in the user array" do
      user1 = create(:user)
      user2 = create(:user)
      user3 = create(:user)
      current_user = user1
      ir = create(:individual_review, reviewer_id: user1.id, employee_id: user2.id)
      ir2 = create(:individual_review, reviewer_id: user1.id, employee_id: user3.id)
      user_array = current_user.authored_reviews.map(&:employee_id)
      @users = User.includes(:profile).where(id: user_array)
      expect(@users).to match_array([user2, user3])
    end  
    it "assigns underlings to all users if the current user is a superadmin" do
      user = create(:user)
      profile = create(:profile, user: user)
      create(:user_role, user: user, name: "SuperAdmin")
      user2 = create(:user)
      user3 = create(:user)
      current_user = user
      if current_user.is_super_admin?
        @underlings = User.includes(:profile).all
      elsif current_user.is_principal?
        other_user_array = Profile.by_job_type(current_user.profile.job_type).less_than_level(current_user.profile.job_level).map(&:user_id)
        @underlings = User.includes(:profile).where(id: other_user_array)
      end
      expect(@underlings).to match_array([user, user2, user3])
    end 
    it "assigns underlings to all users who have the same job type and a lower level if current user is principal" do
      user = create(:user)
      profile = create(:profile, user: user, job_title: 'EIT3', job_level: '3', job_type: 'Engineer')
      create(:user_role, user: user, name: "Principal")
      user2 = create(:user)
      profile2 = create(:profile, user: user2, job_title: 'EIT2', job_level: '2', job_type: 'Engineer')
      user3 = create(:user)
      profile3 = create(:profile, user: user3, job_title: 'EIT4', job_level: '4', job_type: 'Engineer')
      current_user = user
      if current_user.is_super_admin?
        @underlings = User.includes(:profile).all
      elsif current_user.is_principal?
        other_user_array = Profile.by_job_type(current_user.profile.job_type).less_than_level(current_user.profile.job_level).map(&:user_id)
        @underlings = User.includes(:profile).where(id: other_user_array) 
      end
      expect(@underlings).to match_array([user2])
    end  
  end

  describe "GET #show" do
    it "assigns the requested individual_review as @individual_review" do
      individual_review = IndividualReview.create! valid_attributes
      get :show, params: {id: individual_review.to_param}, session: valid_session
      expect(assigns(:individual_review)).to eq(individual_review)
    end

    it "assigns @total_check_questions to the total number of questions with question_type: check_box that are part of the employees level" do
      user1 = create(:user)
      user2 = create(:user)
      current_user = user1
      review = create(:review)
      section = create(:section, review: review)
      q1 = create(:question, section: section)
      q2 = create(:question, question_type: 'text', section: section)
      qj1 = create(:question_job_level, job_level: 1, question: q1)
      qj2 = create(:question_job_level, job_level: 2, question: q2)
      ir = create(:individual_review, reviewer_id: user1.id, employee_id: user2.id, review: review, employee_job_level: 1)
      @total_check_questions = Question.belongs_to_job_level(ir.employee_job_level).where(question_type: "check_box").uniq.count
      expect(@total_check_questions).to eq(1)
    end 

    it "assigns @check_results to a hash of the total for each possible result" do
      user1 = create(:user)
      user2 = create(:user)
      current_user = user1
      review = create(:review)
      section = create(:section, review: review)
      q1 = create(:question, section: section)
      q2 = create(:question, question_type: 'text', section: section)
      q3 = create(:question, question_type: 'check_box', section: section)
      q4 = create(:question, question_type: 'check_box', section: section)
      ir = create(:individual_review, reviewer_id: user1.id, employee_id: user2.id, review: review, employee_job_level: 1)
      a1 = create(:answer, answer: 'Meets Expectations', question: q1, individual_review: ir)
      a2 = create(:answer, answer: 'Exceeds Expectations', question: q2, individual_review: ir)
      a3 = create(:answer, answer: 'Exceeds Expectations', question: q3, individual_review: ir)
      a4 = create(:answer, answer: 'N/A', question: q4, individual_review: ir)
      @check_results = ir.check_results
      expect(@check_results).to eq({"Exceeds Expectations"=>1, "Meets Expectations"=>1, "Needs Improvement"=>0, "N/A"=>1})
    end

    it "assigns @text_results to all of the results for text questions" do
      user1 = create(:user)
      user2 = create(:user)
      current_user = user1
      review = create(:review)
      section = create(:section, review: review)
      q1 = create(:question, section: section)
      q2 = create(:question, question_type: 'text', section: section)
      ir = create(:individual_review, reviewer_id: user1.id, employee_id: user2.id, review: review, employee_job_level: 1)
      a1 = create(:answer, answer: 'Meets Expectations', question: q1, individual_review: ir)
      a2 = create(:answer, answer: 'text answer', question: q2, individual_review: ir)
      @text_results = ir.text_answers
      expect(@text_results).to match_array([a2])
    end
  end

  describe "GET #new" do
    # it "assigns a new individual_review as @individual_review" do
    #   get :new, params: {}, session: valid_session
    #   expect(assigns(:individual_review)).to be_a_new(IndividualReview)
    # end
  end

  describe "GET #edit" do
    it "assigns the requested individual_review as @individual_review" do
      individual_review = IndividualReview.create! valid_attributes
      get :edit, params: {id: individual_review.to_param}, session: valid_session
      expect(assigns(:individual_review)).to eq(individual_review)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new IndividualReview" do
        expect {
          post :create, params: {individual_review: valid_attributes}, session: valid_session
        }.to change(IndividualReview, :count).by(1)
      end

      it "assigns a newly created individual_review as @individual_review" do
        post :create, params: {individual_review: valid_attributes}, session: valid_session
        expect(assigns(:individual_review)).to be_a(IndividualReview)
        expect(assigns(:individual_review)).to be_persisted
      end

      it "assigns the reviewer_id to the current_user id" do 
        user = create(:user)
        current_user = user
        ir = create(:individual_review)
        ir.reviewer_id = current_user.id
        expect(ir.reviewer_id).to eq(current_user.id)
      end

      it "assigns the employee profile according to the user selected as employee" do
        # user = create(:user)
        # employee = create(:profile)
      end 
      it "assigns the employee_job_level as the employee's job level integer" do
        user = create(:user)
        employee = create(:profile, user: user)
        ir = create(:individual_review, employee_id: user.id)
        ir.employee_job_level = employee.job_level.to_i
        expect(ir.employee_job_level).to be_a_kind_of(Fixnum)
        expect(ir.employee_job_level).to eq(employee.job_level.to_i)
      end

      it "redirects to the created individual_review" do
        post :create, params: {individual_review: valid_attributes}, session: valid_session
        expect(response).to redirect_to(IndividualReview.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved individual_review as @individual_review" do
        post :create, params: {individual_review: invalid_attributes}, session: valid_session
        expect(assigns(:individual_review)).to be_a_new(IndividualReview)
      end

      it "re-renders the 'new' template" do
        post :create, params: {individual_review: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested individual_review" do
        individual_review = IndividualReview.create! valid_attributes
        put :update, params: {id: individual_review.to_param, individual_review: new_attributes}, session: valid_session
        individual_review.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested individual_review as @individual_review" do
        individual_review = IndividualReview.create! valid_attributes
        put :update, params: {id: individual_review.to_param, individual_review: valid_attributes}, session: valid_session
        expect(assigns(:individual_review)).to eq(individual_review)
      end

      it "redirects to the individual_review" do
        individual_review = IndividualReview.create! valid_attributes
        put :update, params: {id: individual_review.to_param, individual_review: valid_attributes}, session: valid_session
        expect(response).to redirect_to(individual_review)
      end
    end

    context "with invalid params" do
      it "assigns the individual_review as @individual_review" do
        individual_review = IndividualReview.create! valid_attributes
        put :update, params: {id: individual_review.to_param, individual_review: invalid_attributes}, session: valid_session
        expect(assigns(:individual_review)).to eq(individual_review)
      end

      it "re-renders the 'edit' template" do
        individual_review = IndividualReview.create! valid_attributes
        put :update, params: {id: individual_review.to_param, individual_review: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested individual_review" do
      individual_review = IndividualReview.create! valid_attributes
      expect {
        delete :destroy, params: {id: individual_review.to_param}, session: valid_session
      }.to change(IndividualReview, :count).by(-1)
    end

    it "redirects to the individual_reviews list" do
      individual_review = IndividualReview.create! valid_attributes
      delete :destroy, params: {id: individual_review.to_param}, session: valid_session
      expect(response).to redirect_to(individual_reviews_url)
    end
  end

end
